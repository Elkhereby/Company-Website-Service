/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ExternalLinkPage } from "./ExternalLinkPage";
import { ExternalLinkPageCountArgs } from "./ExternalLinkPageCountArgs";
import { ExternalLinkPageFindManyArgs } from "./ExternalLinkPageFindManyArgs";
import { ExternalLinkPageFindUniqueArgs } from "./ExternalLinkPageFindUniqueArgs";
import { CreateExternalLinkPageArgs } from "./CreateExternalLinkPageArgs";
import { UpdateExternalLinkPageArgs } from "./UpdateExternalLinkPageArgs";
import { DeleteExternalLinkPageArgs } from "./DeleteExternalLinkPageArgs";
import { ExternalLinkPageService } from "../externalLinkPage.service";
@graphql.Resolver(() => ExternalLinkPage)
export class ExternalLinkPageResolverBase {
  constructor(protected readonly service: ExternalLinkPageService) {}

  async _externalLinkPagesMeta(
    @graphql.Args() args: ExternalLinkPageCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ExternalLinkPage])
  async externalLinkPages(
    @graphql.Args() args: ExternalLinkPageFindManyArgs
  ): Promise<ExternalLinkPage[]> {
    return this.service.externalLinkPages(args);
  }

  @graphql.Query(() => ExternalLinkPage, { nullable: true })
  async externalLinkPage(
    @graphql.Args() args: ExternalLinkPageFindUniqueArgs
  ): Promise<ExternalLinkPage | null> {
    const result = await this.service.externalLinkPage(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ExternalLinkPage)
  async createExternalLinkPage(
    @graphql.Args() args: CreateExternalLinkPageArgs
  ): Promise<ExternalLinkPage> {
    return await this.service.createExternalLinkPage({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ExternalLinkPage)
  async updateExternalLinkPage(
    @graphql.Args() args: UpdateExternalLinkPageArgs
  ): Promise<ExternalLinkPage | null> {
    try {
      return await this.service.updateExternalLinkPage({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ExternalLinkPage)
  async deleteExternalLinkPage(
    @graphql.Args() args: DeleteExternalLinkPageArgs
  ): Promise<ExternalLinkPage | null> {
    try {
      return await this.service.deleteExternalLinkPage(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
