/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { NewsPageService } from "../newsPage.service";
import { NewsPageCreateInput } from "./NewsPageCreateInput";
import { NewsPage } from "./NewsPage";
import { NewsPageFindManyArgs } from "./NewsPageFindManyArgs";
import { NewsPageWhereUniqueInput } from "./NewsPageWhereUniqueInput";
import { NewsPageUpdateInput } from "./NewsPageUpdateInput";

export class NewsPageControllerBase {
  constructor(protected readonly service: NewsPageService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: NewsPage })
  async createNewsPage(
    @common.Body() data: NewsPageCreateInput
  ): Promise<NewsPage> {
    return await this.service.createNewsPage({
      data: data,
      select: {
        content: true,
        createdAt: true,
        datePublished: true,
        id: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [NewsPage] })
  @ApiNestedQuery(NewsPageFindManyArgs)
  async newsPages(@common.Req() request: Request): Promise<NewsPage[]> {
    const args = plainToClass(NewsPageFindManyArgs, request.query);
    return this.service.newsPages({
      ...args,
      select: {
        content: true,
        createdAt: true,
        datePublished: true,
        id: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: NewsPage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async newsPage(
    @common.Param() params: NewsPageWhereUniqueInput
  ): Promise<NewsPage | null> {
    const result = await this.service.newsPage({
      where: params,
      select: {
        content: true,
        createdAt: true,
        datePublished: true,
        id: true,
        title: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: NewsPage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateNewsPage(
    @common.Param() params: NewsPageWhereUniqueInput,
    @common.Body() data: NewsPageUpdateInput
  ): Promise<NewsPage | null> {
    try {
      return await this.service.updateNewsPage({
        where: params,
        data: data,
        select: {
          content: true,
          createdAt: true,
          datePublished: true,
          id: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: NewsPage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteNewsPage(
    @common.Param() params: NewsPageWhereUniqueInput
  ): Promise<NewsPage | null> {
    try {
      return await this.service.deleteNewsPage({
        where: params,
        select: {
          content: true,
          createdAt: true,
          datePublished: true,
          id: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
