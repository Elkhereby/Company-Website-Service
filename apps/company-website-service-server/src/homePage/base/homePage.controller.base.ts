/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { HomePageService } from "../homePage.service";
import { HomePageCreateInput } from "./HomePageCreateInput";
import { HomePage } from "./HomePage";
import { HomePageFindManyArgs } from "./HomePageFindManyArgs";
import { HomePageWhereUniqueInput } from "./HomePageWhereUniqueInput";
import { HomePageUpdateInput } from "./HomePageUpdateInput";

export class HomePageControllerBase {
  constructor(protected readonly service: HomePageService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: HomePage })
  async createHomePage(
    @common.Body() data: HomePageCreateInput
  ): Promise<HomePage> {
    return await this.service.createHomePage({
      data: data,
      select: {
        createdAt: true,
        description: true,
        id: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [HomePage] })
  @ApiNestedQuery(HomePageFindManyArgs)
  async homePages(@common.Req() request: Request): Promise<HomePage[]> {
    const args = plainToClass(HomePageFindManyArgs, request.query);
    return this.service.homePages({
      ...args,
      select: {
        createdAt: true,
        description: true,
        id: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: HomePage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async homePage(
    @common.Param() params: HomePageWhereUniqueInput
  ): Promise<HomePage | null> {
    const result = await this.service.homePage({
      where: params,
      select: {
        createdAt: true,
        description: true,
        id: true,
        title: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: HomePage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateHomePage(
    @common.Param() params: HomePageWhereUniqueInput,
    @common.Body() data: HomePageUpdateInput
  ): Promise<HomePage | null> {
    try {
      return await this.service.updateHomePage({
        where: params,
        data: data,
        select: {
          createdAt: true,
          description: true,
          id: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: HomePage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteHomePage(
    @common.Param() params: HomePageWhereUniqueInput
  ): Promise<HomePage | null> {
    try {
      return await this.service.deleteHomePage({
        where: params,
        select: {
          createdAt: true,
          description: true,
          id: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
