/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ContactUsPage } from "./ContactUsPage";
import { ContactUsPageCountArgs } from "./ContactUsPageCountArgs";
import { ContactUsPageFindManyArgs } from "./ContactUsPageFindManyArgs";
import { ContactUsPageFindUniqueArgs } from "./ContactUsPageFindUniqueArgs";
import { CreateContactUsPageArgs } from "./CreateContactUsPageArgs";
import { UpdateContactUsPageArgs } from "./UpdateContactUsPageArgs";
import { DeleteContactUsPageArgs } from "./DeleteContactUsPageArgs";
import { ContactUsPageService } from "../contactUsPage.service";
@graphql.Resolver(() => ContactUsPage)
export class ContactUsPageResolverBase {
  constructor(protected readonly service: ContactUsPageService) {}

  async _contactUsPagesMeta(
    @graphql.Args() args: ContactUsPageCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ContactUsPage])
  async contactUsPages(
    @graphql.Args() args: ContactUsPageFindManyArgs
  ): Promise<ContactUsPage[]> {
    return this.service.contactUsPages(args);
  }

  @graphql.Query(() => ContactUsPage, { nullable: true })
  async contactUsPage(
    @graphql.Args() args: ContactUsPageFindUniqueArgs
  ): Promise<ContactUsPage | null> {
    const result = await this.service.contactUsPage(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ContactUsPage)
  async createContactUsPage(
    @graphql.Args() args: CreateContactUsPageArgs
  ): Promise<ContactUsPage> {
    return await this.service.createContactUsPage({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ContactUsPage)
  async updateContactUsPage(
    @graphql.Args() args: UpdateContactUsPageArgs
  ): Promise<ContactUsPage | null> {
    try {
      return await this.service.updateContactUsPage({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ContactUsPage)
  async deleteContactUsPage(
    @graphql.Args() args: DeleteContactUsPageArgs
  ): Promise<ContactUsPage | null> {
    try {
      return await this.service.deleteContactUsPage(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
