/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { HomePage } from "./HomePage";
import { HomePageCountArgs } from "./HomePageCountArgs";
import { HomePageFindManyArgs } from "./HomePageFindManyArgs";
import { HomePageFindUniqueArgs } from "./HomePageFindUniqueArgs";
import { CreateHomePageArgs } from "./CreateHomePageArgs";
import { UpdateHomePageArgs } from "./UpdateHomePageArgs";
import { DeleteHomePageArgs } from "./DeleteHomePageArgs";
import { HomePageService } from "../homePage.service";
@graphql.Resolver(() => HomePage)
export class HomePageResolverBase {
  constructor(protected readonly service: HomePageService) {}

  async _homePagesMeta(
    @graphql.Args() args: HomePageCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [HomePage])
  async homePages(
    @graphql.Args() args: HomePageFindManyArgs
  ): Promise<HomePage[]> {
    return this.service.homePages(args);
  }

  @graphql.Query(() => HomePage, { nullable: true })
  async homePage(
    @graphql.Args() args: HomePageFindUniqueArgs
  ): Promise<HomePage | null> {
    const result = await this.service.homePage(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => HomePage)
  async createHomePage(
    @graphql.Args() args: CreateHomePageArgs
  ): Promise<HomePage> {
    return await this.service.createHomePage({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => HomePage)
  async updateHomePage(
    @graphql.Args() args: UpdateHomePageArgs
  ): Promise<HomePage | null> {
    try {
      return await this.service.updateHomePage({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => HomePage)
  async deleteHomePage(
    @graphql.Args() args: DeleteHomePageArgs
  ): Promise<HomePage | null> {
    try {
      return await this.service.deleteHomePage(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
