/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AboutUsPageService } from "../aboutUsPage.service";
import { AboutUsPageCreateInput } from "./AboutUsPageCreateInput";
import { AboutUsPage } from "./AboutUsPage";
import { AboutUsPageFindManyArgs } from "./AboutUsPageFindManyArgs";
import { AboutUsPageWhereUniqueInput } from "./AboutUsPageWhereUniqueInput";
import { AboutUsPageUpdateInput } from "./AboutUsPageUpdateInput";

export class AboutUsPageControllerBase {
  constructor(protected readonly service: AboutUsPageService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AboutUsPage })
  async createAboutUsPage(
    @common.Body() data: AboutUsPageCreateInput
  ): Promise<AboutUsPage> {
    return await this.service.createAboutUsPage({
      data: data,
      select: {
        createdAt: true,
        goals: true,
        id: true,
        mission: true,
        updatedAt: true,
        vision: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [AboutUsPage] })
  @ApiNestedQuery(AboutUsPageFindManyArgs)
  async aboutUsPages(@common.Req() request: Request): Promise<AboutUsPage[]> {
    const args = plainToClass(AboutUsPageFindManyArgs, request.query);
    return this.service.aboutUsPages({
      ...args,
      select: {
        createdAt: true,
        goals: true,
        id: true,
        mission: true,
        updatedAt: true,
        vision: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AboutUsPage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async aboutUsPage(
    @common.Param() params: AboutUsPageWhereUniqueInput
  ): Promise<AboutUsPage | null> {
    const result = await this.service.aboutUsPage({
      where: params,
      select: {
        createdAt: true,
        goals: true,
        id: true,
        mission: true,
        updatedAt: true,
        vision: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AboutUsPage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAboutUsPage(
    @common.Param() params: AboutUsPageWhereUniqueInput,
    @common.Body() data: AboutUsPageUpdateInput
  ): Promise<AboutUsPage | null> {
    try {
      return await this.service.updateAboutUsPage({
        where: params,
        data: data,
        select: {
          createdAt: true,
          goals: true,
          id: true,
          mission: true,
          updatedAt: true,
          vision: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AboutUsPage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAboutUsPage(
    @common.Param() params: AboutUsPageWhereUniqueInput
  ): Promise<AboutUsPage | null> {
    try {
      return await this.service.deleteAboutUsPage({
        where: params,
        select: {
          createdAt: true,
          goals: true,
          id: true,
          mission: true,
          updatedAt: true,
          vision: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
