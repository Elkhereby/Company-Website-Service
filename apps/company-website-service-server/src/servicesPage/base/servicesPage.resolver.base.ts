/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ServicesPage } from "./ServicesPage";
import { ServicesPageCountArgs } from "./ServicesPageCountArgs";
import { ServicesPageFindManyArgs } from "./ServicesPageFindManyArgs";
import { ServicesPageFindUniqueArgs } from "./ServicesPageFindUniqueArgs";
import { CreateServicesPageArgs } from "./CreateServicesPageArgs";
import { UpdateServicesPageArgs } from "./UpdateServicesPageArgs";
import { DeleteServicesPageArgs } from "./DeleteServicesPageArgs";
import { ServicesPageService } from "../servicesPage.service";
@graphql.Resolver(() => ServicesPage)
export class ServicesPageResolverBase {
  constructor(protected readonly service: ServicesPageService) {}

  async _servicesPagesMeta(
    @graphql.Args() args: ServicesPageCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ServicesPage])
  async servicesPages(
    @graphql.Args() args: ServicesPageFindManyArgs
  ): Promise<ServicesPage[]> {
    return this.service.servicesPages(args);
  }

  @graphql.Query(() => ServicesPage, { nullable: true })
  async servicesPage(
    @graphql.Args() args: ServicesPageFindUniqueArgs
  ): Promise<ServicesPage | null> {
    const result = await this.service.servicesPage(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ServicesPage)
  async createServicesPage(
    @graphql.Args() args: CreateServicesPageArgs
  ): Promise<ServicesPage> {
    return await this.service.createServicesPage({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ServicesPage)
  async updateServicesPage(
    @graphql.Args() args: UpdateServicesPageArgs
  ): Promise<ServicesPage | null> {
    try {
      return await this.service.updateServicesPage({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ServicesPage)
  async deleteServicesPage(
    @graphql.Args() args: DeleteServicesPageArgs
  ): Promise<ServicesPage | null> {
    try {
      return await this.service.deleteServicesPage(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
