/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, ServicesPage as PrismaServicesPage } from "@prisma/client";

export class ServicesPageServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ServicesPageCountArgs, "select">
  ): Promise<number> {
    return this.prisma.servicesPage.count(args);
  }

  async servicesPages(
    args: Prisma.ServicesPageFindManyArgs
  ): Promise<PrismaServicesPage[]> {
    return this.prisma.servicesPage.findMany(args);
  }
  async servicesPage(
    args: Prisma.ServicesPageFindUniqueArgs
  ): Promise<PrismaServicesPage | null> {
    return this.prisma.servicesPage.findUnique(args);
  }
  async createServicesPage(
    args: Prisma.ServicesPageCreateArgs
  ): Promise<PrismaServicesPage> {
    return this.prisma.servicesPage.create(args);
  }
  async updateServicesPage(
    args: Prisma.ServicesPageUpdateArgs
  ): Promise<PrismaServicesPage> {
    return this.prisma.servicesPage.update(args);
  }
  async deleteServicesPage(
    args: Prisma.ServicesPageDeleteArgs
  ): Promise<PrismaServicesPage> {
    return this.prisma.servicesPage.delete(args);
  }
}
