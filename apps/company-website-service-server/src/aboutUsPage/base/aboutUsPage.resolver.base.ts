/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AboutUsPage } from "./AboutUsPage";
import { AboutUsPageCountArgs } from "./AboutUsPageCountArgs";
import { AboutUsPageFindManyArgs } from "./AboutUsPageFindManyArgs";
import { AboutUsPageFindUniqueArgs } from "./AboutUsPageFindUniqueArgs";
import { CreateAboutUsPageArgs } from "./CreateAboutUsPageArgs";
import { UpdateAboutUsPageArgs } from "./UpdateAboutUsPageArgs";
import { DeleteAboutUsPageArgs } from "./DeleteAboutUsPageArgs";
import { AboutUsPageService } from "../aboutUsPage.service";
@graphql.Resolver(() => AboutUsPage)
export class AboutUsPageResolverBase {
  constructor(protected readonly service: AboutUsPageService) {}

  async _aboutUsPagesMeta(
    @graphql.Args() args: AboutUsPageCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [AboutUsPage])
  async aboutUsPages(
    @graphql.Args() args: AboutUsPageFindManyArgs
  ): Promise<AboutUsPage[]> {
    return this.service.aboutUsPages(args);
  }

  @graphql.Query(() => AboutUsPage, { nullable: true })
  async aboutUsPage(
    @graphql.Args() args: AboutUsPageFindUniqueArgs
  ): Promise<AboutUsPage | null> {
    const result = await this.service.aboutUsPage(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => AboutUsPage)
  async createAboutUsPage(
    @graphql.Args() args: CreateAboutUsPageArgs
  ): Promise<AboutUsPage> {
    return await this.service.createAboutUsPage({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => AboutUsPage)
  async updateAboutUsPage(
    @graphql.Args() args: UpdateAboutUsPageArgs
  ): Promise<AboutUsPage | null> {
    try {
      return await this.service.updateAboutUsPage({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AboutUsPage)
  async deleteAboutUsPage(
    @graphql.Args() args: DeleteAboutUsPageArgs
  ): Promise<AboutUsPage | null> {
    try {
      return await this.service.deleteAboutUsPage(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
