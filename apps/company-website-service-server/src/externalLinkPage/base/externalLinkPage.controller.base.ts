/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ExternalLinkPageService } from "../externalLinkPage.service";
import { ExternalLinkPageCreateInput } from "./ExternalLinkPageCreateInput";
import { ExternalLinkPage } from "./ExternalLinkPage";
import { ExternalLinkPageFindManyArgs } from "./ExternalLinkPageFindManyArgs";
import { ExternalLinkPageWhereUniqueInput } from "./ExternalLinkPageWhereUniqueInput";
import { ExternalLinkPageUpdateInput } from "./ExternalLinkPageUpdateInput";

export class ExternalLinkPageControllerBase {
  constructor(protected readonly service: ExternalLinkPageService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ExternalLinkPage })
  async createExternalLinkPage(
    @common.Body() data: ExternalLinkPageCreateInput
  ): Promise<ExternalLinkPage> {
    return await this.service.createExternalLinkPage({
      data: data,
      select: {
        createdAt: true,
        id: true,
        title: true,
        updatedAt: true,
        url: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ExternalLinkPage] })
  @ApiNestedQuery(ExternalLinkPageFindManyArgs)
  async externalLinkPages(
    @common.Req() request: Request
  ): Promise<ExternalLinkPage[]> {
    const args = plainToClass(ExternalLinkPageFindManyArgs, request.query);
    return this.service.externalLinkPages({
      ...args,
      select: {
        createdAt: true,
        id: true,
        title: true,
        updatedAt: true,
        url: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ExternalLinkPage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async externalLinkPage(
    @common.Param() params: ExternalLinkPageWhereUniqueInput
  ): Promise<ExternalLinkPage | null> {
    const result = await this.service.externalLinkPage({
      where: params,
      select: {
        createdAt: true,
        id: true,
        title: true,
        updatedAt: true,
        url: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ExternalLinkPage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateExternalLinkPage(
    @common.Param() params: ExternalLinkPageWhereUniqueInput,
    @common.Body() data: ExternalLinkPageUpdateInput
  ): Promise<ExternalLinkPage | null> {
    try {
      return await this.service.updateExternalLinkPage({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          title: true,
          updatedAt: true,
          url: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ExternalLinkPage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteExternalLinkPage(
    @common.Param() params: ExternalLinkPageWhereUniqueInput
  ): Promise<ExternalLinkPage | null> {
    try {
      return await this.service.deleteExternalLinkPage({
        where: params,
        select: {
          createdAt: true,
          id: true,
          title: true,
          updatedAt: true,
          url: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
