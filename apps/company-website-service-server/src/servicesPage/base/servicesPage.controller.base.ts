/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ServicesPageService } from "../servicesPage.service";
import { ServicesPageCreateInput } from "./ServicesPageCreateInput";
import { ServicesPage } from "./ServicesPage";
import { ServicesPageFindManyArgs } from "./ServicesPageFindManyArgs";
import { ServicesPageWhereUniqueInput } from "./ServicesPageWhereUniqueInput";
import { ServicesPageUpdateInput } from "./ServicesPageUpdateInput";

export class ServicesPageControllerBase {
  constructor(protected readonly service: ServicesPageService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ServicesPage })
  async createServicesPage(
    @common.Body() data: ServicesPageCreateInput
  ): Promise<ServicesPage> {
    return await this.service.createServicesPage({
      data: data,
      select: {
        createdAt: true,
        description: true,
        id: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ServicesPage] })
  @ApiNestedQuery(ServicesPageFindManyArgs)
  async servicesPages(@common.Req() request: Request): Promise<ServicesPage[]> {
    const args = plainToClass(ServicesPageFindManyArgs, request.query);
    return this.service.servicesPages({
      ...args,
      select: {
        createdAt: true,
        description: true,
        id: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ServicesPage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async servicesPage(
    @common.Param() params: ServicesPageWhereUniqueInput
  ): Promise<ServicesPage | null> {
    const result = await this.service.servicesPage({
      where: params,
      select: {
        createdAt: true,
        description: true,
        id: true,
        title: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ServicesPage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateServicesPage(
    @common.Param() params: ServicesPageWhereUniqueInput,
    @common.Body() data: ServicesPageUpdateInput
  ): Promise<ServicesPage | null> {
    try {
      return await this.service.updateServicesPage({
        where: params,
        data: data,
        select: {
          createdAt: true,
          description: true,
          id: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ServicesPage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteServicesPage(
    @common.Param() params: ServicesPageWhereUniqueInput
  ): Promise<ServicesPage | null> {
    try {
      return await this.service.deleteServicesPage({
        where: params,
        select: {
          createdAt: true,
          description: true,
          id: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
