/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ContactUsPageService } from "../contactUsPage.service";
import { ContactUsPageCreateInput } from "./ContactUsPageCreateInput";
import { ContactUsPage } from "./ContactUsPage";
import { ContactUsPageFindManyArgs } from "./ContactUsPageFindManyArgs";
import { ContactUsPageWhereUniqueInput } from "./ContactUsPageWhereUniqueInput";
import { ContactUsPageUpdateInput } from "./ContactUsPageUpdateInput";

export class ContactUsPageControllerBase {
  constructor(protected readonly service: ContactUsPageService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ContactUsPage })
  async createContactUsPage(
    @common.Body() data: ContactUsPageCreateInput
  ): Promise<ContactUsPage> {
    return await this.service.createContactUsPage({
      data: data,
      select: {
        createdAt: true,
        email: true,
        id: true,
        message: true,
        phoneNumber: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ContactUsPage] })
  @ApiNestedQuery(ContactUsPageFindManyArgs)
  async contactUsPages(
    @common.Req() request: Request
  ): Promise<ContactUsPage[]> {
    const args = plainToClass(ContactUsPageFindManyArgs, request.query);
    return this.service.contactUsPages({
      ...args,
      select: {
        createdAt: true,
        email: true,
        id: true,
        message: true,
        phoneNumber: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ContactUsPage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async contactUsPage(
    @common.Param() params: ContactUsPageWhereUniqueInput
  ): Promise<ContactUsPage | null> {
    const result = await this.service.contactUsPage({
      where: params,
      select: {
        createdAt: true,
        email: true,
        id: true,
        message: true,
        phoneNumber: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ContactUsPage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateContactUsPage(
    @common.Param() params: ContactUsPageWhereUniqueInput,
    @common.Body() data: ContactUsPageUpdateInput
  ): Promise<ContactUsPage | null> {
    try {
      return await this.service.updateContactUsPage({
        where: params,
        data: data,
        select: {
          createdAt: true,
          email: true,
          id: true,
          message: true,
          phoneNumber: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ContactUsPage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteContactUsPage(
    @common.Param() params: ContactUsPageWhereUniqueInput
  ): Promise<ContactUsPage | null> {
    try {
      return await this.service.deleteContactUsPage({
        where: params,
        select: {
          createdAt: true,
          email: true,
          id: true,
          message: true,
          phoneNumber: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
